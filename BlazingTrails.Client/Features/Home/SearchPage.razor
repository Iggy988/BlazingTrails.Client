@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/maxlength/{MaxLength:int}"
@inject HttpClient http
@inject NavigationManager navManager


<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a> 
        </li> 
        <li class="breadcrumb-item active" aria-current="page">Search</li> 
    </ol> 
</nav>


<h3 class="mt-5 mb-4">Search results for "@SearchTerm"</h3>
<SearchFilter SearchTerm="@SearchTerm" MaxLength="MaxLength" MaxTime="MaxTime" />

@if (_searchResults == null)
{
    <p>Loading search results...</p>
}
else
{
    <TrailDetails Trail="_selectedTrail" />

    <div class="grid">
        @foreach (var trail in _searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected" />
        }
    </div>
}


@code {
    private IEnumerable<Trail> _cachedSearchResults = Array.Empty<Trail>();
    private IEnumerable<Trail>? _searchResults;
    private Trail? _selectedTrail;
    [Parameter] 
    public string SearchTerm { get; set; } = default!;
    [Parameter, SupplyParameterFromQuery]
    public int? MaxLength { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public int? MaxTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allTrails = await http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");
            _searchResults = allTrails!.Where(x => x.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
                x.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
            //stores copy of unfiltered search results
            _cachedSearchResults = _searchResults;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading trail data: {ex.Message}");   
        }
    }

    //koristimo OnParametersSet() zato sto OnInitializedAsync() execute only once in comp lifecycle, sto znaci da nece execute kad dodamo filter
    // OnParametersSet() ce execute svali put kad dodamo filter
    protected override void OnParametersSet()
    {
        // //Check for cached search results and a filter value; if both are present, then filter the results.
        // if (_cachedSearchResults.Any() && MaxLength.HasValue)
        // {
        //     _searchResults = _cachedSearchResults.Where(x => x.Length <= MaxLength.Value);
        // }
        // //If there are cached search results but no filter, then reset the results to the unfiltered set.
        // else if(_cachedSearchResults.Any() && MaxLength is null)
        // {
        //     _searchResults = _cachedSearchResults;
        // }
        UpdateFilters();
    }

    private void UpdateFilters()
    {
        var filters = new List<Func<Trail, bool>>();
        //If a max length filter is defined, add the lambda to filter it to the filters list.
        if (MaxLength is not null && MaxLength > 0)
        {
            filters.Add(x => x.Length <= MaxLength);
        }
        //If a max time filter is defined, add the lambda to filter it to the filters list.
        if (MaxTime is not null && MaxTime > 0)
        {
            filters.Add(x => x.TimeInMinutes <= MaxTime * 60);
        }
        //Otherwise, use the unfiltered cached search results.
        if (filters.Any())
        {
            _searchResults = _cachedSearchResults.Where(trail => filters.All(filter => filter(trail)));
        }
        else
        {
            //if there are any filters, filter the cached search results using them.
            _searchResults = _cachedSearchResults;
        }
    }

    private void HandleTrailSelected(Trail trail) => _selectedTrail = trail;
}
